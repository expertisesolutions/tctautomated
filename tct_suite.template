<!--(macro m_show)-->
 <!--(if mshow)-->
${mshow}$#!
 <!--(end)-->
<!--(end)-->
<!--(macro def_obj)-->${'.'.join(param.type.namespaces).lower()}$.${param.type.short_name}$ arg_${param.name}$ = null;<!--(end)-->
<!--(macro def_param)-->
 <!--(if param.type.type == param.type.type.CLASS)-->${def_obj(param=param)}$<!--(else)-->${suite.type_convert(param.type)}$ arg_${param.name}$ = default(${suite.type_convert(param.type)}$);<!--(end)-->
<!--(end)-->
<!--(macro def_params)-->
 <!--(for p in parameters)-->
           ${def_param(param=p)}$
 <!--(end)-->
<!--(end)-->
using System;
using NUnit.Framework;
using NUnit.Framework.TUnit;

namespace ${suite.name}$.Tests {

${m_show(mshow=suite.custom)}$#!
<!--(for cls in suite)-->

    [TestFixture]
    [Description("${suite.name}$.${cls.name.replace('.','')}$ Tests by automaTest")]
    public class ${cls.name.replace('.','')}$Tests {

        private static ${'.'.join(cls.namespaces).lower()}$.${cls.short_name}$ obj;
${m_show(mshow=cls.custom)}$#!

        [SetUp]
        public static void Init()
        {
            LogUtils.Write(LogUtils.DEBUG , LogUtils.TAG , "Preconditions for each TEST");
${m_show(mshow=suite.init)}$#!
 <!--(if cls.init)-->
${cls.init}$
 <!--(else)-->
            obj = new ${'.'.join(cls.namespaces).lower()}$.${cls.short_name}$Concrete();
 <!--(end)-->
        }

        [TearDown]
        public static void Destroy()
        {
            LogUtils.Write(LogUtils.DEBUG , LogUtils.TAG , "Postconditions for each TEST");
${m_show(mshow=suite.shutdown)}$#!
 <!--(if cls.shutdown)-->
${cls.shutdown}$
 <!--(else)-->
            obj.Dispose();
            obj = null;
 <!--(end)-->
        }
#!  METHODS
 <!--(for func in cls.methods)-->

        [Test]
        [Category("P0")]
        [Description("Calling method ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ MR")]
        [Property("SPEC_URL", "-")]
        [Property("CRITERIA", "CONSTR")]
        [Property("AUTHOR", "AutomaTest Boot, automated@tst")]
        public void ${func.name}$_METHOD_CALL()
        {
            /*
             * PRECONDITION 
             */
   <!--(if len(list(func.parameters)) > 0)-->
${def_params(parameters=func.parameters)}$
   <!--(end)-->
${m_show(mshow=func.arg_init)}$#!
${m_show(mshow=func.init)}$#!

            /* CALLING METHOD  */
            <!--(if func.method_return_type)-->var r = <!--(end)-->obj.${func.format_name}$(${', '.join([ suite.print_arg(p) for p in func.parameters])}$);

            /*
             * POSTCONDITION
             */
${m_show(mshow=func.arg_shutdown)}$#!
${m_show(mshow=func.shutdown)}$#!
        }

 <!--(end)-->
#!  PROPERTIES FUNCTION GET
 <!--(for func in cls.properties)-->
  <!--(if func.getter_scope == func.getter_scope.PUBLIC)-->
        [Test]
        [Category("P0")]
        [Description("Calling Property Get ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ MR")]
        [Property("SPEC_URL", "-")]
        [Property("CRITERIA", "CONSTR")]
        [Property("AUTHOR", "AutomaTest Boot, automated@tst")]
        public void ${func.name}$_PROPERTY_GET()
        {
            /*
             * PRECONDITION
             */
   <!--(if len(list(func.getter_values)) > 1)-->
${def_params(parameters=func.getter_values)}$
   <!--(end)-->
   <!--(if len(list(func.getter_keys)) > 0)-->
${def_params(parameters=func.getter_keys)}$
   <!--(end)-->
${m_show(mshow=func.arg_get_init)}$#!
${m_show(mshow=func.get_init)}$#!
            /* CALLING PROPERTY  */
   <!--(if len(list(func.getter_values)) == 1)-->
            var arg_${list(func.getter_values)[0].name}$ = obj.Get${func.format_name}$(${', '.join(['arg_{}'.format(param.name) for param in func.getter_keys])}$);
   <!--(else)-->
            obj.Get${func.format_name}$(${', '.join([suite.print_arg(p) for p in func.getter_keys] + ['out arg_{}'.format(p.name) for p in func.getter_values])}$);
   <!--(end)-->

            /*
             * POSTCONDITION
             */
${m_show(mshow=func.arg_get_shutdown)}$#!
${m_show(mshow=func.get_shutdown)}$#!
        }

  <!--(end)-->
#!  PROPERTIES FUNCTION SET
  <!--(if func.setter_scope == func.setter_scope.PUBLIC)-->
        [Test]
        [Category("P0")]
        [Description("Calling Property Set ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ MR")]
        [Property("SPEC_URL", "-")]
        [Property("CRITERIA", "CONSTR")]
        [Property("AUTHOR", "AutomaTest Boot, automated@tst")]
        public void ${func.name}$_PROPERTY_SET()
        {
            /*
             * PRECONDITIONS
             */
${def_params(parameters=func.setter_values)}$
   <!--(if len(list(func.setter_keys)) > 0)-->
${def_params(parameters=func.setter_keys)}$
   <!--(end)-->
${m_show(mshow=func.arg_set_init)}$#!
${m_show(mshow=func.set_init)}$#!
            /* CALLING PROPERTY  */
            obj.Set${func.format_name}$(${', '.join([suite.print_arg(p) for p in list(func.setter_keys) + list(func.setter_values)])}$);

            /*
             * POSCONDITIONS
             */
${m_show(mshow=func.arg_set_shutdown)}$#!
${m_show(mshow=func.set_shutdown)}$#!
        }

  <!--(end)-->
 <!--(end)-->
}
<!--(end)-->
}

<!--(macro m_show)-->
 <!--(if mshow)-->
${mshow}$#!
 <!--(elif exists("mdefault"))-->
${mdefault}$
 <!--(end)-->
<!--(end)-->
<!--(macro def_obj)-->${name_helpers.class_managed_name(param.type.class_)}$ ${prefix}$${param.name}$ = null;<!--(end)-->
<!--(macro def_param)-->
 <!--(if param.type.type == param.type.type.CLASS)-->${def_obj(param=param, prefix=prefix)}$<!--(else)-->${suite.type_convert(param.type)}$ ${prefix}$${param.name}$ = default(${suite.type_convert(param.type)}$);<!--(end)-->
<!--(end)-->
<!--(macro def_params)-->
 <!--(for p in parameters)-->
           ${def_param(param=p, prefix=default("prefix", "arg_"))}$
 <!--(end)-->
<!--(end)-->
<!--(macro meth_target)-->
 <!--(if func.is_static)-->${name_helpers.class_managed_name(cls)}$<!--(else)-->obj<!--(end)-->
<!--(end)-->
<!--(macro callget)-->
  <!--(if not func.getter_return_type and len(list(func.getter_values)) == 1)-->
            get_arg_${list(func.getter_values)[0].name}$ = ${meth_target(func=func, cls=cls)}$.Get${func.format_name}$(${', '.join(['get_arg_{}'.format(param.name) for param in func.getter_keys])}$);
  <!--(else)-->
            ${meth_target(func=func, cls=cls)}$.Get${func.format_name}$(${', '.join(['get_arg_{}'.format(p.name) for p in func.getter_keys] + ['out get_arg_{}'.format(p.name) for p in func.getter_values])}$);
  <!--(end)-->
<!--(end)-->


using System;
using System.Threading.Tasks;
using NUnit.Framework;
//using NUnit.Framework.TUnit;

namespace ${suite.name}$.Tests {

${m_show(mshow=suite.custom)}$#!
<!--(for cls in suite)-->

    [TestFixture]
    [Description("${suite.name}$.${cls.name.replace('.','')}$ Tests by automaTest")]
    public class ${cls.name.replace('.','')}$Tests {

        private static ${name_helpers.class_managed_name(cls)}$ obj;
${m_show(mshow=cls.custom)}$#!

 <!--(include)-->
 tct_setup.template
 <!--(end)-->

 <!--(include)-->
 tct_teardown.template
 <!--(end)-->

 <!--(if cls.init)-->
 CONSTN_constructor_null.template
 <!--(end)-->
 <!--(include)-->
 CONSTR_constructor.template
 <!--(end)-->
#!  METHODS
 <!--(for func in cls.methods)-->
   <!--(include)-->
   MR_method_call.template
   <!--(end)-->
   <!--(include)-->
   MEX_method_exception.template
   <!--(end)-->
   <!--(for argenum in filter(func.is_enum, func.parameters))-->
     <!--(include)-->
     MAE_method_enum.template
     <!--(end)-->
   <!--(end)-->
   <!--(if next(filter(func.is_number, func.parameters), False))-->
     <!--(include)-->
     MAR_method_in_out_range.template
     <!--(end)-->
   <!--(end)-->
 <!--(end)--> #!  METHODS END
#!  PROPERTIES FUNCTION GET
 <!--(for func in cls.properties)-->
  <!--(if func.has_getter)-->
    <!--(include)-->
    PRO_prop_get_value.template
    <!--(end)-->
    <!--(for argenum in filter(func.is_enum, func.getter_keys))-->
       <!--(include)-->
       PRE_prop_get_enum.template
       <!--(end)-->
    <!--(end)-->
    <!--(if next(filter(func.is_number, func.getter_keys), False))-->
     <!--(include)-->
     PMAX_prop_get_max_value.template
     <!--(end)-->
     <!--(include)-->
     PMIN_prop_get_min_value.template
     <!--(end)-->
     <!--(if func.pam_init)-->
       <!--(include)-->
       PAM_prop_get_above_max_value.template
       <!--(end)-->
     <!--(end)-->
     <!--(if func.pbm_init)-->
       <!--(include)-->
       PBM_prop_get_below_min_value.template
       <!--(end)-->
     <!--(end)-->
    <!--(end)-->
  <!--(end)-->
#!  PROPERTIES FUNCTION SET
  <!--(if func.has_setter)-->

    <!--(if func.has_getter)-->
      <!--(include)-->
      PRW_prop_set_get.template
      <!--(end)-->
    <!--(end)-->

    <!--(for argenum in filter(func.is_enum, func.setter_keys))-->
        <!--(include)-->
        MAE_prop_set_enum.template
        <!--(end)-->
    <!--(end)-->
    <!--(if next(filter(func.is_number, func.setter_keys), False))-->

        <!--(include)-->
        PMAX_prop_set_max_val.template
        <!--(end)-->

        <!--(include)-->
        PMIN_prop_set_min_val.template
        <!--(end)-->

    <!--(end)-->
  <!--(end)-->
 <!--(end)-->
 <!--(for event in cls.events)-->
         <!--(include)-->
         EVENT_event.template
         <!--(end)-->
 <!--(end)-->
}
<!--(end)-->
}

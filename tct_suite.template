<!--(macro m_show)-->
 <!--(if mshow)-->
${mshow}$#!
 <!--(elif exists("mdefault"))-->
${mdefault}$
 <!--(end)-->
<!--(end)-->
<!--(macro def_obj)-->${'.'.join(param.type.namespaces).lower()}$.I${param.type.short_name}$ arg_${param.name}$ = null;<!--(end)-->
<!--(macro def_param)-->
 <!--(if param.type.type == param.type.type.CLASS)-->${def_obj(param=param)}$<!--(else)-->${suite.type_convert(param.type)}$ arg_${param.name}$ = default(${suite.type_convert(param.type)}$);<!--(end)-->
<!--(end)-->
<!--(macro def_params)-->
 <!--(for p in parameters)-->
           ${def_param(param=p)}$
 <!--(end)-->
<!--(end)-->
<!--(macro meth_target)-->
 <!--(if func.is_class)-->${'.'.join(cls.namespaces).lower()}$.${cls.short_name}$<!--(else)-->obj<!--(end)-->
<!--(end)-->
using System;
using NUnit.Framework;
using NUnit.Framework.TUnit;

namespace ${suite.name}$.Tests {

${m_show(mshow=suite.custom)}$#!
<!--(for cls in suite)-->

    [TestFixture]
    [Description("${suite.name}$.${cls.name.replace('.','')}$ Tests by automaTest")]
    public class ${cls.name.replace('.','')}$Tests {

        private static ${'.'.join(cls.namespaces).lower()}$.I${cls.short_name}$ obj;
${m_show(mshow=cls.custom)}$#!

        [SetUp]
        public static void Init()
        {
            LogUtils.Write(LogUtils.DEBUG , LogUtils.TAG , "Preconditions for each TEST");
${m_show(mshow=suite.init)}$#!
 <!--(if cls.init)-->
${cls.init}$
 <!--(else)-->
            obj = new ${'.'.join(cls.namespaces).lower()}$.${cls.short_name}$();
 <!--(end)-->
        }

        [TearDown]
        public static void Destroy()
        {
            LogUtils.Write(LogUtils.DEBUG , LogUtils.TAG , "Postconditions for each TEST");
${m_show(mshow=suite.shutdown)}$#!
 <!--(if cls.shutdown)-->
${cls.shutdown}$
 <!--(else)-->
            obj.Dispose();
            obj = null;
 <!--(end)-->
        }

        [Test]
        [Category("P1")]
        [Description("Create a ${cls.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$ C")]
        [Property("SPEC_URL", "-")]
${m_show(mshow=cls.criteria_custom,mdefault='        [Property("CRITERIA", "CONSTR")]')}$#!
        [Property("AUTHOR", "AutomaTest Boot, tct@automated")]
        public void ${cls.name}$_CONSTRUCTOR_TEST()
        {
            Assert.IsIstanceOf<${'.'.join(cls.namespaces).lower()}$.${cls.short_name}$>(obj, "Should Return ${'.'.join(cls.namespaces).lower()}$.${cls.short_name}$ Instance");
        }
#!  METHODS
 <!--(for func in cls.methods)-->

        [Test]
        [Category("P1")]
        [Description("Calling method ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ MR")]
        [Property("SPEC_URL", "-")]
${m_show(mshow=func.criteria_custom,mdefault='        [Property("CRITERIA", "MR")]')}$#!
        [Property("AUTHOR", "AutomaTest Boot, tct@automated")]
        public void ${func.name}$_METHOD_CALL()
        {
   <!--(if len(list(func.parameters)) > 0)-->
${def_params(parameters=func.parameters)}$
   <!--(end)-->
${m_show(mshow=func.arg_init)}$#!
${m_show(mshow=func.init)}$#!
            /* CALLING METHOD  */
            <!--(if func.method_return_type)-->var r = <!--(end)-->${meth_target(func=func, cls=cls)}$.${func.format_name}$(${', '.join([ suite.print_arg(p) for p in func.parameters])}$);

${m_show(mshow=func.arg_shutdown)}$#!
${m_show(mshow=func.shutdown)}$#!
        }

    <!--(for argenum in func.has_enum)-->
         [Test]
        [Category("P1")]
        [Description("Calling method Enum ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ M")]
        [Property("SPEC_URL", "-")]
        [Property("CRITERIA", "MAE")]')
        [Property("AUTHOR", "AutomaTest Boot, tct@automated")]
     <!--(for field in argenum.type.typedecl.enum_fields)-->
        public void ${func.name}$_ENUM_${field.c_name}$()
        {
   <!--(if len(list(func.parameters)) > 0)-->
${def_params(parameters=func.parameters)}$
   <!--(end)-->
${m_show(mshow=func.arg_init)}$#!
${m_show(mshow=func.init)}$#!
            /* CALLING METHOD  */
            arg_${argenum.name}$ = ${suite.type_convert(argenum.type)}$.${field.c_name}$;
            <!--(if func.method_return_type)-->var r = <!--(end)-->${meth_target(func=func, cls=cls)}$.${func.format_name}$(${', '.join([ suite.print_arg(p) for p in func.parameters])}$);

${m_show(mshow=func.arg_shutdown)}$#!
${m_show(mshow=func.shutdown)}$#!
        }
     <!--(end)-->
    <!--(end)-->
 <!--(end)-->
#!  PROPERTIES FUNCTION GET
 <!--(for func in cls.properties)-->
  <!--(if func.has_getter)-->
        [Test]
        [Category("P1")]
        [Description("Calling Property Get ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ A")]
        [Property("SPEC_URL", "-")]
${m_show(mshow=func.get_criteria_custom,mdefault='        [Property("CRITERIA", "PRO")]')}$#!
        [Property("AUTHOR", "AutomaTest Boot, tct@automated")]
        public void ${func.name}$_PROPERTY_GET()
        {
   <!--(if len(list(func.getter_values)) > 1)-->
${def_params(parameters=func.getter_values)}$
   <!--(end)-->
   <!--(if len(list(func.getter_keys)) > 0)-->
${def_params(parameters=func.getter_keys)}$
   <!--(end)-->
${m_show(mshow=func.arg_get_init)}$#!
${m_show(mshow=func.get_init)}$#!
            /* CALLING PROPERTY  */
   <!--(if len(list(func.getter_values)) == 1)-->
            var arg_${list(func.getter_values)[0].name}$ = ${meth_target(func=func, cls=cls)}$.Get${func.format_name}$(${', '.join(['arg_{}'.format(param.name) for param in func.getter_keys])}$);
   <!--(else)-->
            ${meth_target(func=func, cls=cls)}$.Get${func.format_name}$(${', '.join([suite.print_arg(p) for p in func.getter_keys] + ['out arg_{}'.format(p.name) for p in func.getter_values])}$);
   <!--(end)-->

   <!--(for p in func.getter_values)-->
            Assert.NotNull(arg_${p.name}$, "${p.name}$ should be readable");
   <!--(end)-->
${m_show(mshow=func.arg_get_shutdown)}$#!
${m_show(mshow=func.get_shutdown)}$#!
        }
    <!--(for argenum in func.has_enum)-->
         [Test]
        [Category("P1")]
        [Description("Calling Property Get Enum ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$_get M")]
        [Property("SPEC_URL", "-")]
        [Property("CRITERIA", "MAE")]')
        [Property("AUTHOR", "AutomaTest Boot, tct@automated")]
     <!--(for field in argenum.type.typedecl.enum_fields)-->
        public void ${func.name}$_ENUM_GET_${field.c_name}$()
        {
       <!--(if len(list(func.getter_values)) > 1)-->
${def_params(parameters=func.getter_values)}$
       <!--(end)-->
       <!--(if len(list(func.getter_keys)) > 0)-->
${def_params(parameters=func.getter_keys)}$
       <!--(end)-->
${m_show(mshow=func.arg_get_init)}$#!
${m_show(mshow=func.get_init)}$#!
            /* CALLING PROPERTY  */
            arg_${argenum.name}$ = ${suite.type_convert(argenum.type)}$.${field.c_name}$;
        <!--(if len(list(func.getter_values)) == 1)-->
            var arg_${list(func.getter_values)[0].name}$ = ${meth_target(func=func, cls=cls)}$.Get${func.format_name}$(${', '.join(['arg_{}'.format(param.name) for param in func.getter_keys])}$);
        <!--(else)-->
            ${meth_target(func=func, cls=cls)}$.Get${func.format_name}$(${', '.join([suite.print_arg(p) for p in func.getter_keys] + ['out arg_{}'.format(p.name) for p in func.getter_values])}$);
        <!--(end)-->

        <!--(for p in func.getter_values)-->
            Assert.NotNull(arg_${p.name}$, "${p.name}$ should be readable");
        <!--(end)-->
${m_show(mshow=func.arg_get_shutdown)}$#!
${m_show(mshow=func.get_shutdown)}$#!
        }
     <!--(end)-->
    <!--(end)-->

  <!--(end)-->
#!  PROPERTIES FUNCTION SET
  <!--(if func.has_setter)-->
        [Test]
        [Category("P1")]
        [Description("Calling Property Set ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$ A")]
        [Property("SPEC_URL", "-")]
${m_show(mshow=func.set_criteria_custom,mdefault='        [Property("CRITERIA", "PRW")]')}$#!
        [Property("AUTHOR", "AutomaTest Boot, automated@tst")]
        public void ${func.name}$_PROPERTY_SET()
        {
${def_params(parameters=func.setter_values)}$
   <!--(if len(list(func.setter_keys)) > 0)-->
${def_params(parameters=func.setter_keys)}$
   <!--(end)-->
${m_show(mshow=func.arg_set_init)}$#!
${m_show(mshow=func.set_init)}$#!
            /* CALLING PROPERTY  */
            ${meth_target(func=func, cls=cls)}$.Set${func.format_name}$(${', '.join([suite.print_arg(p) for p in list(func.setter_keys) + list(func.setter_values)])}$);

${m_show(mshow=func.arg_set_shutdown)}$#!
${m_show(mshow=func.set_shutdown)}$#!
        }

    <!--(for argenum in func.has_enum)-->
         [Test]
        [Category("P1")]
        [Description("Calling Property Set Enum ${func.name}$.")]
        [Property("SPEC", "${suite.name}$.${cls.name}$.${func.name}$_set M")]
        [Property("SPEC_URL", "-")]
        [Property("CRITERIA", "MAE")]')
        [Property("AUTHOR", "AutomaTest Boot, tct@automated")]
     <!--(for field in argenum.type.typedecl.enum_fields)-->
        public void ${func.name}$_ENUM_SET_${field.c_name}$()
        {
${def_params(parameters=func.setter_values)}$
   <!--(if len(list(func.setter_keys)) > 0)-->
${def_params(parameters=func.setter_keys)}$
   <!--(end)-->
${m_show(mshow=func.arg_set_init)}$#!
${m_show(mshow=func.set_init)}$#!
            /* CALLING PROPERTY  */
            arg_${argenum.name}$ = ${suite.type_convert(argenum.type)}$.${field.c_name}$;
            ${meth_target(func=func, cls=cls)}$.Set${func.format_name}$(${', '.join([suite.print_arg(p) for p in list(func.setter_keys) + list(func.setter_values)])}$);

${m_show(mshow=func.arg_set_shutdown)}$#!
${m_show(mshow=func.set_shutdown)}$#!
        }
     <!--(end)-->
    <!--(end)-->

  <!--(end)-->
 <!--(end)-->
}
<!--(end)-->
}
